doctype html
html(lang="en" class="no-js")
  head
    meta(charset='utf-8')
    title marsoon | Export fig.yml to Diagram Graph. No just only fig.yml.
    meta(name="description" content="Export fig.yml to Diagram Graph.")
    meta(name="keywords" content="fig, marsoon, docker, dockers, diagram, graph")
    meta(name="viewport" content="width=device-width, maximum-scale=1, user-scalable=no")
    meta(name="mobile-web-app-capable" content="yes")
    meta(name="apple-mobile-web-app-capable" content="yes")
    meta(name="apple-mobile-web-app-status-bar-style" content="black")
    link(href='http://fonts.googleapis.com/css?family=Lilita+One|Lato:300,400,700' rel='stylesheet')
    link(href='http://maxcdn.bootstrapcdn.com/bootstrap/3.3.1/css/bootstrap.min.css' rel='stylesheet')

    // build:css(./) css/marsoon.css
    // endbuild

    // build:css css/marsoon-app.css
    style.
      body {
        font-family: 'Lato', sans-serif;
        font-weight: 300;
        font-size: 18px;
        color: #362;
        padding-bottom: 20px;
      }

      textarea {
        border: none !important;
        background: #D5E1B4 !important;
        border-bottom: 2px solid #bec9a1 !important;
        font-size: 14px !important;
        color: #484F40 !important;
      }

      .note {
        color: #a41211;
      }

      .highlight {
        background-color: #f7f7f9;
        border: 1px solid #e1e1e8;
        border-radius: 4px;
      }
    // endbuild

  body

    .container
      .row
        .col-xs-12
          h1 marsoon - Export fig.yml to Diagram Graph.
          p No just only fig.yml.
          h3.note Now, You can edit fig.yml.
      .row
        .col-xs-6
          h2 fig.yml
          textarea.form-control#fig(rows='15')
            |db:
            |  image: postgres
            |  ports:
            |    - "5432"
            |web:
            |  build: .
            |  command: bundle exec rackup -p 3000
            |  volumes:
            |    - .:/myapp
            |  ports:
            |    - "3000:3000"
            |  links:
            |    - db

        .col-xs-6
          h2 json
          textarea.form-control#yml-json(rows='15')

      .row
        .col-xs-12
          h2 Diagram Graph
          #diagram.highlight
            .mermaid
        .col-xs-12
          h2 Mermaid Graph
          textarea#mermaid.form-control(rows='15')

    // build:js(./) js/marsoon.js
    script(src='https://cdnjs.cloudflare.com/ajax/libs/jquery/2.1.3/jquery.min.js')
    script(src='https://cdnjs.cloudflare.com/ajax/libs/js-yaml/3.0.2/js-yaml.min.js')
    script(src='https://cdnjs.cloudflare.com/ajax/libs/mermaid/0.3.0/mermaid.full.min.js')
    // endbuild

    // build:js js/marsoon-app.js
    script.

      updateYML();
      $(document).on('input propertychange', '#fig', function () {
        updateYML();
      });

      function updateYML() {
        try {
          var doc = jsyaml.load($('#fig').val());
          $('#yml-json').val(JSON.stringify(doc, null, 2));
          updateMermaid(doc);
        } catch(e) {}
      };

      function updateMermaid(doc) {
        var mermaidContent = 'graph LR;\n';
        var allLinks = [];
        var allPorts = [];
        mermaidContent += '  Client[Client];\n';
        mermaidContent += '  ' + 'style Client fill:blue;\n';
        for (var k in doc) {
          mermaidContent += '  ' + k + '[' + k + '];\n';
          mermaidContent += '  ' + 'style ' + k + ' fill:#484F40;\n';
          var links = doc[k].links;
          if (links && links.length) {
            for (var i = 0, l = links.length; i < l; i++) {
              var alias = links[i].split(':');
              allLinks.push([k, alias[0]]);
            }
          }
          var ports = doc[k].ports;
          if (ports && ports.length) {
            for (var i = 0, l = ports.length; i < l; i++) {
              var ps = ports[i].split(':');
              allPorts.push([k, ps[0], ps[1]]);
            }
          }
        }

        var index = -1;
        for (var i = 0, l = allPorts.length; i < l; ++i) {
          var arr = allPorts[i];
          if (arr[2]) {
            mermaidContent += '  Client' + '-->|' + arr[1] + ':' + arr[2] + '| ' + arr[0] + ';\n';
          } else {
            for (var j = 0, k = allLinks.length; j < k; ++j) {
              if (allLinks[j][0] === arr[0] || allLinks[j][1] === arr[0]) {

                if (allLinks[j][0] === arr[0]) {
                  mermaidContent += '  ' + allLinks[j][1] + '-->|' + arr[1] + '| ' + arr[0] + ';\n';
                } else {
                  mermaidContent += '  ' + allLinks[j][0] + '-->|' + arr[1] + '| ' + arr[0] + ';\n';
                }
                index = j;
              }
            }
          }
        }
        if (index >= 0) {
          allLinks.splice(index, 1);
        }
        for (var i = 0, l = allLinks.length; i < l; ++i) {
          mermaidContent += '  ' + allLinks[i][0] + '-->' + allLinks[i][1] + ';\n';
        }
        $('#mermaid').val(mermaidContent);
        var newGraphDefinition = $('<div class="mermaid">').text(mermaidContent);
        $('#diagram').empty().append(newGraphDefinition);
        mermaid.init();
      }

    // endbuild

